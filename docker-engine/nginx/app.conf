# HTTP - Redirect to HTTPS and handle Certbot ACME challenge
server {
    listen 80;
    server_name dev.gilroybarandeatery.dpathemes.org www.dev.gilroybarandeatery.dpathemes.org;

    location /.well-known/acme-challenge/ {
        root /var/www/certbot;   # Make sure this path is mounted for Certbot
    }

    location / {
        return 301 https://$host$request_uri;
    }
}

# HTTPS - Main secure application server
server {
    listen 443 ssl;
    server_name dev.gilroybarandeatery.dpathemes.org www.dev.gilroybarandeatery.dpathemes.org;

    ssl_certificate /etc/letsencrypt/live/dev.gilroybarandeatery.dpathemes.org/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/dev.gilroybarandeatery.dpathemes.org/privkey.pem;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;

    root /www/wwwroot/dev-gilroy-repo/public;
    index index.php index.html;
    client_max_body_size 100M;

    location / {
        # Handle CORS preflight OPTIONS
        if ($request_method = OPTIONS) {
            add_header Access-Control-Allow-Origin $http_origin always;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, PATCH, DELETE, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Authorization, Content-Type, X-Requested-With" always;
            add_header Access-Control-Allow-Credentials "true" always;
            return 204;
        }

        try_files $uri $uri/ /index.php?$query_string;
    }

    location ~ \.php$ {
        try_files $uri =404;
        fastcgi_pass gilroy-app:9000;   # Must match PHP container name
        fastcgi_index index.php;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param PATH_INFO $fastcgi_path_info;

        fastcgi_param HTTP_ORIGIN $http_origin;
    }

    location ~ /\.ht {
        deny all;
    }
}
